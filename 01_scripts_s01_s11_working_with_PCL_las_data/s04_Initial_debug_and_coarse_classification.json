// **************************************************************************
//  s04_initial_debug_and_coarse_classification.json
//  ---------------------------------------
//  Date                 : apr 2020
//  Copyright            : © 2020 by David Fernández Arango
//  Email                : davidfernandezarango at hotmail dot com
//  Email                : luipir at gmail dot com
//  ***************************************************************************
//  *                                                                         *
//  *   This program is free software; you can redistribute it and/or modify  *
//  *   it under the terms of the GNU General Public License as published by  *
//  *   the Free Software Foundation; either version 2 of the License, or     *
//  *   (at your option) any later version.                                   *
//  *                                                                         *
//  *   This script uses different filters for initially debug the point      *  
//  *   cloud.                                                                *
//  *                                                                         *  
//  **************************************************************************

 

{
  "pipeline":[

    //  Can be execute via command line:
    //  pdal pipeline -i <json file> --readers.las.filename=<the .las input file>
    //  Input file must be <output0_merge_las_files.las> (if you had merged two .las files previously) or a <raw_pcl_las_file.las>    

    //  LOAD INPUT DATA.
    {
        "type":"readers.las",
        "filename":"input.las"
    },

    //  **************************************************************
    //  FILTER POINTS BY SCAN ANGLE RANK. Only points with
    //  ScanAngleRank [-45:45] are wanted. This angle is measured in sexagesimal degrees
    //  from the nadir to the zenith divided by 2. So the horizontal is 45 degrees instead
    //  of 90 and therefore 50 degrees is above the horizontal of the sensor.
    //  For the same angle used, the height of the measured points will vary
    //  depending on the width of the street*/
    {
        "type":"filters.range",
        "limits":"ScanAngleRank[-45:45]"
    },

    //  *******************************************************************
    //  FILTER POINTS BY NUMBER OF RETURNS. Only first returns are wanted
    {
        "type":"filters.range",
        "limits":"NumberOfReturns[1:1]"
    },

    //  *********************************************************************
    //  FILTER LOW POINTS BY ELM FILTER.
    //  The Extended Local Minimum (ELM) filter low points as noise.
    //  This filter is an implementation of the method decribed in [Chen, 2012].
    //  ELM begins by rasterizing the input point cloud data at the given cell size.
    //  Within each cell, the lowest point is considered noise if the next lowest
    //  point is a given threshold above the current point. If it is marked as noise,
    //  the difference between the next two points is also considered, marking points
    //  as noise if needed, and continuing until another neighbour is found to be
    //  within the threshold. At this point, iteration for the current cell stops,
    //  and the next cell is considered.[https://pdal.io/stages/filters.elm.html?highlight=elm]
    //  In this case we use cell=0.06 and threshold = 0.18 because our pcl mobile mapping system has a point every 3cm approximately.
    {
        "type":"filters.elm",
        "cell":1, //cell size
        "threshold":0.25,
        "class":7
    },

    //  **************************************************************************
    //  APPLY OUTLIER FILTER - STATISTICAL METHOD
    //  This method requires two passes throug the input pointview, first to compute
    //  a threshold value based on global statistics, and second to identify outliers
    //  using the computed threshold.
    //  In the first pass, for each point in the input pointview, compute the mean distance
    //  to each of the k-nearest neighbors. Then, a global mean of these mean distances is
    //  computed along with the standard deviation.

    //  Outlier filter assigns a classification value of 7 to the noise points. To
    //  remove the noise points altogether, users can add a range filter to their
    //  pipeline downstream from the outlier filter.*/
    {
        "type":"filters.outlier",
        "multiplier":3, //standard deviation threshold
        "mean_k":30, //mean number of neighbors
        "method":"statistical"//is the default method. It is possible to use radius method
    },

    //  *******************************************************************************
    //  APPLY FILTER SMRF
    //  Filter ground classifies ground and not ground points using the Simple Morpholigical Filter (SMRF) approach
    //  oulined in [Pingel, 2013]*/
    //  We use this filter to have an initial classification of ground points to work on
    {
        "type":"filters.smrf",
        "ignore":"Classification[7:7]",
        "threshold":0.10
    },

    //  generate output. Can be override via command line via:
    //  --writers.las.filename=<the new file>
    {
        "type":"writers.las",
        "filename":"outputS04_initial_debug.las",
        // add all dimensions generated during previous processings
        // otherwise only LAS dimensions are saved
        "extra_dims":"all"
    }
  ]
}
